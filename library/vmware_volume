#!/usr/bin/python
# -*- coding: utf-8 -*-
#

from __future__ import (absolute_import, division, print_function)

from ansible.module_utils.basic import AnsibleModule, bytes_to_human
import ansible.module_utils.vmware as vmware
import socket

__metaclass__ = type

try:
    from pyVmomi import vim
    HAS_PYVMOMI = True
except ImportError:
    HAS_PYVMOMI = False


def get_unit_number(vm):
    unit_number = 0
    for dev in vm.config.hardware.device:
        if hasattr(dev.backing, 'fileName'):
            unit_number = int(dev.unitNumber) + 1
            # unit_number 7 reserved for scsi controller
            if unit_number == 7:
                unit_number += 1
            if unit_number >= 16:
                raise ValueError("Too many disks")
    return unit_number


class VmwareVolume(object):
    def __init__(self, vm, uuid=None):
        self.vm = vm
        self.device = None
        if uuid is not None:
            disks = [d for d in vm.config.hardware.device
                     if isinstance(d, vim.vm.device.VirtualDisk)]
            for disk in disks:
                if disk.backing.uuid == uuid:
                    self.device = disk
                    break

    def facts(self):
        return {
                "scsi_number": (list(str(self.device.key))[2:]
                                if self.device.key else None),
                "label": (self.device.deviceInfo.label
                          if self.device.deviceInfo else None),
                "datastore": self.device.backing.datastore.name,
                "thin_provisioning": self.device.backing.thinProvisioned,
                "uuid": self.device.backing.uuid,
                "file_name": self.device.backing.fileName,
                "size": bytes_to_human(self.device.capacityInBytes)
            }

    def modify(self, size, datastore=None):
        if self.device is None:
            raise Exception('No disk found')
        if size * 1024 * 1024 < self.device.capacityInKB:
            raise Exception("Reducing disk size is not allowed.")
        changed = False
        if size * 1024 * 1024 > self.device.capacityInKB:
            diskspec = vim.vm.device.VirtualDeviceSpec()
            diskspec.operation = \
                vim.vm.device.VirtualDeviceSpec.Operation.edit
            diskspec.device = self.device
            diskspec.device.capacityInKB = size * 1024 * 1024
            configspec = vim.vm.ConfigSpec()
            configspec.deviceChange.append(diskspec)
            task = self.vm.ReconfigVM_Task(spec=configspec)
            vmware.wait_for_task(task)
            changed = True
        if datastore is not None and \
                self.device.backing.datastore.name != datastore.name:
            dlspec = vim.vm.RelocateSpec.DiskLocator(
                datastore=datastore, diskId=self.device.key)
            relocatespec = vim.vm.RelocateSpec()
            relocatespec.disk.append(dlspec)
            task = self.vm.RelocateVM_Task(spec=relocatespec)
            vmware.wait_for_task(task)
            changed = True
        return changed

    def add(self, size, datastore=None):
        if self.device is not None:
            raise Exception('UUID {0} is already in use'.format(
                self.device.backing.uuid))
        index = get_unit_number(self.vm)
        scsi_ctl = None
        for device in self.vm.config.hardware.device:
            for ctl in (vim.vm.device.VirtualLsiLogicController,
                        vim.vm.device.ParaVirtualSCSIController,
                        vim.vm.device.VirtualLsiLogicSASController,
                        vim.vm.device.VirtualBusLogicController):
                if isinstance(device, ctl):
                    scsi_ctl = vim.vm.device.VirtualDeviceSpec()
                    scsi_ctl.device = device
        if scsi_ctl is None:
            raise Exception('No SCSI Controller found on {0}'.format(
                self.vm.name))
        diskspec = vim.vm.device.VirtualDeviceSpec()
        diskspec.operation = vim.vm.device.VirtualDeviceSpec.Operation.add
        diskspec.fileOperation = \
            vim.vm.device.VirtualDeviceSpec.FileOperation.create
        diskspec.device = vim.vm.device.VirtualDisk()
        diskspec.device.backing = \
            vim.vm.device.VirtualDisk.FlatVer2BackingInfo()
        diskspec.device.backing.diskMode = 'persistent'
        if datastore is not None and \
                self.vm.config.datastoreUrl[0].name != datastore.name:
            path_on_ds = '[{0}]{1}'.format(datastore.name, self.vm.name)
            diskspec.device.backing.fileName = '{0}/{1}_{2}.vmdk'.format(
                    path_on_ds, self.vm.name, index)
            diskspec.device.backing.datastore = datastore
        diskspec.device.backing.thinProvisioned = True
        diskspec.device.controllerKey = scsi_ctl.device.key
        diskspec.device.unitNumber = index
        diskspec.device.capacityInKB = size * 1024 * 1024
        configspec = vim.vm.ConfigSpec()
        configspec.deviceChange.append(diskspec)
        task = self.vm.ReconfigVM_Task(spec=configspec)
        vmware.wait_for_task(task)
        return True

    def remove(self):
        if self.device is None:
            return False
        diskspec = vim.vm.device.VirtualDeviceSpec()
        diskspec.operation = vim.vm.device.VirtualDeviceSpec.Operation.remove
        diskspec.fileOperation = \
            vim.vm.device.VirtualDeviceSpec.FileOperation.destroy
        diskspec.device = self.device
        configspec = vim.vm.ConfigSpec()
        configspec.deviceChange.append(diskspec)
        task = self.vm.ReconfigVM_Task(spec=configspec)
        vmware.wait_for_task(task)
        return True


def main():
    argument_spec = vmware.vmware_argument_spec()
    argument_spec.update(
        dict(
            guest_name=dict(type='str'),
            guest_uuid=dict(type='str'),
            size=dict(type='int'),
            datastore=dict(type='str'),
            state=dict(default='present',
                       choices=['present', 'absent', 'list']),
            uuid=dict(aliases=['volume_uuid'])
        )
    )
    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
        required_one_of=[['guest_name', 'guest_uuid']],
        required_if=[
            ['state', 'absent', ['uuid']],
            ['state', 'present', ['size']]
        ]
    )

    if not HAS_PYVMOMI:
        module.fail_json(msg='pyvmomi module required')

    try:
        content = vmware.connect_to_api(module)
    except socket.error as e:
        module.fail_json(msg=e.strerror)

    if module.params.get('guest_uuid'):
        try:
            vm = content.searchIndex.FindByUuid(
                 uuid=module.params['guest_uuid'],
                 vmSearch=True)
        except:
            pass
    else:
        try:
            vm = vmware.find_vm_by_name(content, module.params['guest_name'])
        except:
            pass

    if vm is None:
        module.fail_json(
            msg='Guest {guest_uuid}{guest_name} not found'.format(
                **module.params))

    volume = VmwareVolume(vm, module.params.get('uuid'))

    if module.params['state'] == 'present':  
        ds = None
        if module.params.get('datastore') is not None:
            ds = vmware.find_obj(
                content, [vim.Datastore],
                module.params['datastore'], True)
            if ds is None:
                module.fail_json(
                    msg='Datastore {datastore} not found'.format(
                        **module.params))
            if vm.config.datastoreUrl[0].name != ds.name:
                dc = ds.parent
                while not isinstance(dc, vim.Datacenter) and dc is not None:
                    dc = dc.parent
                if dc is None:
                    module.fail_json(
                        msg='Datacenter for {0} not found'.format(ds.name))
                path_on_ds = '[{0}]{1}'.format(ds.name, vm.name)
                content.fileManager.MakeDirectory(path_on_ds, dc, True)
        if module.params.get('uuid'):
            try:
                module.exit_json(
                    changed=volume.modify(module.params['size'], ds))
            except Exception as e:
                module.fail_json(msg=str(e))
        else:
            try:
                module.exit_json(
                    changed=volume.add(module.params['size'], ds))
            except Exception as e:
                module.fail_json(msg=str(e))

    if module.params['state'] == 'absent':
        try:
            module.exit_json(changed=volume.remove())
        except Exception as e:
            module.fail_json(msg=str(e))

    if module.params['state'] == 'list':
        disks = [d for d in vm.config.hardware.device
                if isinstance(d, vim.vm.device.VirtualDisk)]
        f = []
        for disk in disks:
            if module.params.get('uuid') is None or \
                    disk.backing.uuid == module.params['uuid']:
                f.append(VmwareVolume(vm, disk.backing.uuid).facts())

        module.exit_json(changed=False, volumes=f)


if __name__ == '__main__':
    main()

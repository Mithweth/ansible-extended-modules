#!/usr/bin/python

import os, sys, json, time
from ansible.module_utils.basic import AnsibleModule
import boto3
import botocore

"""
Timer with timeout
"""
def wait_for(seconds):
    global elapsed
    global param_timeout
    time.sleep(seconds) ; elapsed += seconds
    if elapsed > param_timeout:
        module.fail_json(changed=False, msg="Timeout exceeded") 

"""
Wait until the given state changes
"""
def wait_until(state, **args):
    global ec2
    if ec2 is None:
        raise Exception("Connection to Amazon not opened")    
    if 'InstanceId' in args:
        instance = ec2.Instance(args['InstanceId'])
        while instance.state['Name'] != state:
            wait_for(2)
            instance = ec2.Instance(args['InstanceId'])
    elif 'ImageId' in args:
        image = ec2.Image(args['ImageId'])
        while image.state != state:
            wait_for(2)
            image = ec2.Image(args['ImageId'])


"""
Create a new instance with an image created from the previous instance
The previous instance and image are deleted if the creation process is successful
As, you cannot "move" instances over AZ and/or subnets, the deletion and re-creation is the only way.
Usage:
  - create_instance(Arguments=dict(),FromInstance=<instance>)
Parameters:
  - instance : ec2.Instance object to migrate
  - dict() : {'keypair':'', 'security_groups':'', 'instance_type': '', 'availability_zone': '', 'subnet': '', 'private_ip_address', ''}
    N.B.: the 'private_ip_address' value is optional and cannot be used only on migrate in the same subnet
Returns:
  - successfully migration ec2.Instance object
""" 
def create_instance(**args):
    global ec2
    if ec2 is None:
        raise Exception("Connection to Amazon not opened")
    if 'Arguments' not in args:
        raise Exception("No 'Arguments' parameter found")
    if 'FromInstance' in args:
        from_instance_id = args['FromInstance'].id
    elif 'FromInstanceId' in args:
        from_instance_id = args['FromInstanceId']
    else:
        raise Exception("No 'FromInstance' or 'FromInstanceId' parameter found")
    from_instance = ec2.Instance(from_instance_id)
    if from_instance.state['Name'] == 'running':
        try:
            from_instance.stop()
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        from_instance = ec2.Instance(from_instance.id)
        wait_until('stopped', InstanceId=from_instance_id)
    image = from_instance.create_image(Name='ansible-image_'+ str(time.time()))
    wait_until('available', ImageId=image.id)
    monitoring = False if from_instance.monitoring['State'] == 'disabled' else True
    if 'private_ip_address' in args['Arguments']:
        try:
            response = from_instance.terminate()
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        if response['ResponseMetadata']['HTTPStatusCode'] != 200:
            module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'terminate' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
        wait_until('terminated', InstanceId=from_instance_id)
    try:
        if 'private_ip_address' in args['Arguments']:
            new_instances = ec2.create_instances(ImageId=image.id, MinCount=1, MaxCount=1,
                KeyName=args['Arguments']['keypair'], SecurityGroupIds=args['Arguments']['security_groups'],
                InstanceType=args['Arguments']['instance_type'], Placement={'AvailabilityZone': args['Arguments']['availability_zone']},
                Monitoring={'Enabled': monitoring}, SubnetId=args['Arguments']['subnet'],
                PrivateIpAddress=args['Arguments']['private_ip_address'])
        else:
            new_instances = ec2.create_instances(ImageId=image.id, MinCount=1, MaxCount=1,
                KeyName=args['Arguments']['keypair'], SecurityGroupIds=args['Arguments']['security_groups'],
                InstanceType=args['Arguments']['instance_type'], Placement={'AvailabilityZone': args['Arguments']['availability_zone']},
                Monitoring={'Enabled': monitoring}, SubnetId=args['Arguments']['subnet'])
    except botocore.exceptions.ClientError as err:
        image.deregister()
        module.fail_json(changed=False, msg=str(err))
    to_instance = new_instances[0]
    wait_until('running', InstanceId=to_instance.id)
    try:
        if 'tags' in args['Arguments']:
            if args['Arguments']['tags'] is not None: to_instance.create_tags(Tags=args['Arguments']['tags'])
    except botocore.exceptions.ClientError as err:
        image.deregister()
        to_instance.terminate()
        module.fail_json(changed=False, msg=str(err))
    try:
        response = image.deregister()
    except botocore.exceptions.ClientError as err:
        module.fail_json(changed=False, msg=str(err))
    if response['ResponseMetadata']['HTTPStatusCode'] != 200:
        module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'deregister_images' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
    if 'private_ip_address' not in args['Arguments']:
        try:
            response = from_instance.terminate()
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        if response['ResponseMetadata']['HTTPStatusCode'] != 200:
            module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'terminate' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
        wait_until('terminated', InstanceId=from_instance_id)
    return to_instance        

"""
Prettify the ec2.Instance object variables so that module returns the same keys as ec2 module
Usage:
  - serialize_instances(instance)
Parameters:
  - instance : ec2.Instance object to prettify
Returns:
  - ec2.Instance variables dictionary
"""
def serialize_instances(instance):
    keypair = instance.key_pair.name if instance.key_pair is not None else None
    return { 
        'private_dns_name': instance.private_dns_name,
        'public_dns_name': instance.public_dns_name,
        'public_ip': instance.public_ip_address,
        'private_ip': instance.private_ip_address,
        'id': instance.id,
        'ebs_optimized': instance.ebs_optimized,
        'state': instance.state['Name'],
        'state_code': instance.state['Code'],
        'virtualization_type': instance.virtualization_type,
        'architecture': instance.architecture,
        'ramdisk': instance.ramdisk_id,
        'key_name': keypair,
        'vpc_subnet_id': instance.subnet.id,
        'placement': instance.placement['AvailabilityZone'],
        'launch_time': instance.launch_time.strftime('%Y-%m-%dT%H:%M:%S'),
        'instance_type': instance.instance_type,
        'root_device_name': instance.root_device_name,
        'hypervisor': instance.hypervisor,
        'block_device_mapping': [{bdm['DeviceName']: {
                                    'status':bdm['Ebs']['Status'],
                                    'delete_on_termination': bdm['Ebs']['DeleteOnTermination'],
                                    'volume_id': bdm['Ebs']['VolumeId']}
                                } for bdm in instance.block_device_mappings],
        'groups': [{sg['GroupName']: sg['GroupId']} for sg in instance.security_groups],
        'tags': None if instance.tags is None else [{tag['Key']: tag['Value']} for tag in instance.tags]
    }

"""
Default values
"""
aws_regions=[
		'us-east-1',
		'us-west-2',
		'us-west-1',
		'eu-west-1',
		'eu-central-1',
		'ap-southeast-1',
		'ap-northeast-1',
		'ap-southeast-2',
		'ap-northeast-2',
		'sa-east-1']
aws_instances = [
			't2.nano', 't2.micro', 't2.small', 't2.medium', 't2.large', 
			'm4.large', 'm4.xlarge', 'm4.2xlarge', 'm4.4xlarge', 'm4.10xlarge',
			'm3.medium', 'm3.large', 'm3.xlarge', 'm3.2xlarge', 'x1.32xlarge',
			'c4.large', 'c4.xlarge', 'c4.2xlarge', 'c4.4xlarge', 'c4.8xlarge',
			'c3.large', 'c3.xlarge', 'c3.2xlarge', 'c3.4xlarge', 'c3.8xlarge',
			'r3.large', 'r3.xlarge', 'r3.2xlarge', 'r3.4xlarge', 'r3.8xlarge',
			'i2.xlarge', 'i2.2xlarge', 'i2.4xlarge', 'i2.8xlarge', 'd2.xlarge',
			'd2.2xlarge', 'd2.4xlarge', 'd2.8xlarge', 'g2.2xlarge', 'g2.8xlarge']

"""
Main
"""

"""
Module definition
"""
module = AnsibleModule(argument_spec = dict(
        region = dict(required=False, choices=aws_regions, aliases=['aws_region', 'ec2_region']),
        access_key = dict(required=False, no_log=True, aliases=['aws_access_key']),
        secret_key = dict(required=False, no_log=True, aliases=['aws_secret_key', 'ec2_secret_key']),
        ssh_key = dict(required=False, aliases=['keypair', 'key_name']),
        instance_id = dict(required=True, aliases=['instance']),
        instance_tags = dict(required=False, aliases=['tags'], type='dict'),
        instance_type = dict(required=False, choices=aws_instances),
        delete_on_termination = dict(required=False, default=False, type='bool'),
        zone = dict(required=False, aliases=['availability_zone', 'placement', 'aws_zone', 'ec2_zone']),
        security_groups = dict(required=False, type='list', aliases=['security_group_id', 'security_group', 'security_group_ids', 'group_id']),
        subnet_id = dict(required=False, aliases=['subnet', 'vpc_subnet_id']),
        state = dict(required=False, default='running', choices=['running', 'stopped']),
        timeout = dict(required=False, default=300, type='int'),
        wait = dict(required=False, default=False, type='bool')),
        supports_check_mode=False)

param_region = module.params.get('region')
param_access_key = module.params.get('access_key')
param_secret_key = module.params.get('secret_key')
param_instance_id = module.params.get('instance_id')
param_instance_type = module.params.get('instance_type')
param_key_pair = module.params.get('ssh_key')
param_zone = module.params.get('zone')
param_sgs = module.params.get('security_groups')
param_subnet_id = module.params.get('subnet_id')
param_instance_tags = module.params.get('instance_tags')
param_delete_on_term = module.params.get('delete_on_termination')
param_state = module.params.get('state')
param_timeout = module.params.get('timeout')
param_wait = module.params.get('wait')
elapsed = 0

if param_region is None:
    param_region = os.environ.get("EC2_REGION")

if param_access_key is None:
    if os.environ.get("AWS_ACCESS_KEY_ID") is not None:
        param_access_key = os.environ.get("AWS_ACCESS_KEY_ID")
    elif os.environ.get("AWS_ACCESS_KEY") is not None:
        param_access_key = os.environ.get("AWS_ACCESS_KEY")
    else:
        param_access_key = os.environ.get("EC2_ACCESS_KEY")

if param_secret_key is None:
    if os.environ.get("AWS_SECRET_ACCESS_KEY") is not None:
        param_secret_key = os.environ.get("AWS_SECRET_ACCESS_KEY")
    elif os.environ.get("AWS_SECRET_KEY") is not None:
        param_secret_key = os.environ.get("AWS_SECRET_KEY")
    else:
        param_secret_key = os.environ.get("EC2_SECRET_KEY")


"""
Set ec2 variables
"""
session = boto3.session.Session(region_name=param_region, aws_access_key_id=param_access_key, aws_secret_access_key=param_secret_key)
client = session.client('ec2')
ec2 = session.resource('ec2')
changed = False

try:
    instance = ec2.Instance(param_instance_id)
except botocore.exceptions.ClientError as err:
    module.fail_json(changed=False, msg=str(err))
try:
    instance.state['Name']
except AttributeError:
    module.fail_json(changed=False, msg="The instance %s does not seem to exist" % instance.id)
if instance.state['Name'] == 'terminated':
    module.fail_json(changed=False, msg="The instance %s is terminated." % param_instance_id)

"""
Change subnet (same AvailabilityZone)
- if security groups are specified in the module call, use those groups
- otherwise, among all the available security groups, select one with the same VPC ID as the new subnet.
NB: The private IP address will not be kept
"""
if param_subnet_id is not None and param_zone is None and instance.subnet.id != param_subnet_id:
    subnet = ec2.Subnet(param_subnet_id)
    if param_sgs is not None:
        groups = param_sgs
    else:
        groups = [security_group['GroupId'] for security_group in instance.security_groups if subnet.vpc_id == ec2.SecurityGroup(security_group['GroupId']).vpc_id]
        if not groups:
            groups = [sg.id for sg in ec2.security_groups.all() if subnet.vpc_id == sg.vpc_id]
            if groups: groups = [groups[0]]
    instance_args = dict(instance_type=instance.instance_type,
                        availability_zone=subnet.availability_zone,
                        subnet=subnet.id,
                        tags = instance.tags,
                        keypair=instance.key_pair.name,
                        security_groups=groups)
    instance = create_instance(Arguments=instance_args, FromInstance=instance)
    changed = True

"""
Change AvailabilityZone
- if a subnet is specified in the module call, use it.
- otherwise, try to use the subnet of the current instance.
However, check that the subnet is present in the new AvailabilityZone.
If not, choose one subnet in the new AvailabilityZone.
- Then, if security groups are specified in the module call, use those groups
- otherwise, among all the available security groups, select one with the same VPC ID as the chosen subnet.
NB: The private IP address will not be kept 
"""
if param_zone is not None and instance.placement['AvailabilityZone'] != param_zone:
    subnet = ec2.Subnet(instance.subnet.id) if param_subnet_id is None else ec2.Subnet(param_subnet_id)
    if subnet.availability_zone != param_zone:
        for subnet in ec2.subnets.all():
            if subnet.availability_zone == param_zone: break
        if subnet.availability_zone != param_zone:
            module.fail_json(changed=False, msg="No subnet detection in AvailabilityZone %s" % param_zone)
    if param_sgs is not None:
        groups = param_sgs
    else:
        groups = [security_group['GroupId'] for security_group in instance.security_groups if subnet.vpc_id == ec2.SecurityGroup(security_group['GroupId']).vpc_id]
        if not groups:
            groups = [sg.id for sg in ec2.security_groups.all() if subnet.vpc_id == sg.vpc_id]
            if groups: groups = [groups[0]]
    instance_args = dict(instance_type=instance.instance_type,
                        availability_zone=param_zone,
                        subnet=subnet.id,
                        tags = instance.tags,
                        keypair=instance.key_pair.name,
                        security_groups=groups)
    instance = create_instance(Arguments=instance_args, FromInstance=instance)
    changed = True

"""
Change SecurityGroups
"""
if param_sgs is not None and param_zone is None and param_subnet_id is None:
    instance_groups = [ sg['GroupId'] for sg in instance.security_groups]
    instance_groups.sort(); param_sgs.sort()
    if instance_groups != param_sgs:
        if instance.state['Name'] == 'running':
            try:
                instance.stop()
            except botocore.exceptions.ClientError as err:
                module.fail_json(changed=False, msg=str(err))
            wait_until('stopped', InstanceId=instance.id)
        try:
            response = client.modify_instance_attribute(InstanceId=instance.id, Groups=param_sgs)
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        if response['ResponseMetadata']['HTTPStatusCode'] != 200:
            module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'modify_instance_attribute' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
        changed = True

"""
Change InstanceType
"""
if param_instance_type is not None and instance.instance_type != param_instance_type:
    if instance.state['Name'] == 'running':
        try:
            instance.stop()
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        wait_until('stopped', InstanceId=instance.id)
    try:
        response = client.modify_instance_attribute(InstanceId=instance.id, InstanceType={'Value': param_instance_type})
    except botocore.exceptions.ClientError as err:
        module.fail_json(changed=False, msg=str(err))
    if response['ResponseMetadata']['HTTPStatusCode'] != 200:
        module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'modify_instance_attribute' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
    changed = True

"""
Change DeleteOnTermination flag on attached disks
"""
if param_delete_on_term is not None:
    bdm = [{'DeviceName': attach['DeviceName'],
            'Ebs': {'VolumeId': attach['Ebs']['VolumeId'],
            'DeleteOnTermination': param_delete_on_term}} for attach in instance.block_device_mappings
                if attach['Ebs']['Status'] == 'attached' and attach['Ebs']['DeleteOnTermination'] != param_delete_on_term]
    if bdm:
        try:
            response = client.modify_instance_attribute(InstanceId=instance.id, BlockDeviceMappings=bdm)
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        if response['ResponseMetadata']['HTTPStatusCode'] != 200:
            module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'modify_instance_attribute' is %d " % response['ResponseMetadata']['HTTPStatusCode'])
        changed = True

"""
Change Tags
"""
if param_instance_tags is not None:
    tag_array = [{'Key':key, 'Value':val} for key,val in param_instance_tags.iteritems()]
    instance_tags = instance.tags
    tag_array.sort(); instance_tags.sort()
    if tag_array != instance_tags:
        try:
            instance.create_tags(Tags=tag_array)
        except botocore.exceptions.ClientError as err:
            module.fail_json(changed=False, msg=str(err))
        changed = True

"""
Change SSH Key Pair
The private IP address will be kept
"""
if param_key_pair is not None and (instance.key_pair is None or instance.key_pair.name != param_key_pair):
    groups = [sg['GroupId'] for sg in instance.security_groups]
    instance_args = dict(instance_type=instance.instance_type,
                        availability_zone=instance.placement['AvailabilityZone'],
                        subnet=instance.subnet.id,
                        private_ip_address = instance.private_ip_address,
                        tags = instance.tags,
                        keypair=param_key_pair,
                        security_groups=groups)
    instance = create_instance(Arguments=instance_args, FromInstance=instance)
    changed = True

"""
Start the instance if stopped
If the 'wait' parameter is set to True, the module will hang until availability
"""
if param_state == 'running' and instance.state['Name'] != "running":
    try:
        instance.start()
    except botocore.exceptions.ClientError as err:
        module.fail_json(changed=False, msg=str(err))
    if param_wait == True:
        wait_until('running', InstanceId=instance.id)

"""
Stop the instance if running
If the 'wait' parameter is set to True, the module will hang until unavailability
"""
if param_state == 'stopped' and instance.state['Name'] != "stopped":
    try:
        instance.stop()
    except botocore.exceptions.ClientError as err:
        module.fail_json(changed=False, msg=str(err))
    if param_wait == True:
        wait_until('stopped', InstanceId=instance.id)

instance = ec2.Instance(instance.id)
module.exit_json(changed=changed, instance_ids=[instance.id], instances=[serialize_instances(instance)])

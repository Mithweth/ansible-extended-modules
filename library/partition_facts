#!/usr/bin/python

import os
from ansible.module_utils.basic import AnsibleModule

HAS_PYPARTED = False
try:
    import parted
    import _ped
    HAS_PYPARTED = True
except ImportError:
    pass

def main():
    module = AnsibleModule(argument_spec = dict(
            disk = dict(required=False, aliases=['device']),
        ))

    if not HAS_PYPARTED:
        module.fail_json(msg='pyparted module required')

    if os.getuid() != 0:
        module.fail_json(msg='root access required to execute this module')  

    disk_facts = []
    param_disk = module.params.get('disk')
    partition_types = {
                parted.PARTITION_NORMAL:    "primary",
                parted.PARTITION_LOGICAL:   "logical",
                parted.PARTITION_EXTENDED:  "extended",
                parted.PARTITION_FREESPACE: "free-space",
                parted.PARTITION_METADATA:  "metadata",
                parted.PARTITION_PROTECTED: "protected"
            }
    flags = {
                parted.PARTITION_LVM:               'lvm',
                parted.PARTITION_BOOT:              'boot',
                parted.PARTITION_ROOT:              'root',
                parted.PARTITION_HIDDEN:            'hidden',
                parted.PARTITION_RAID:              'raid',
                parted.PARTITION_SWAP:              'swap',
                parted.PARTITION_LBA:               'lba',
                parted.PARTITION_DIAG:              'diag',
                parted.PARTITION_BIOS_GRUB:         'bios-grub',
                parted.PARTITION_APPLE_TV_RECOVERY: 'tv-recovery',
                parted.PARTITION_LEGACY_BOOT:       'legacy',
                parted.PARTITION_LBA:               'lba',
                parted.PARTITION_PREP:              'prep',
                parted.PARTITION_PALO:              'palo'
            }

    if param_disk is not None:
        try:
            devices = [parted.getDevice(param_disk)]
        except _ped.IOException as err:
            module.fail_json(changed=False, msg=str(err))
    else:
        try:
            devices = parted.getAllDevices()
        except _ped.IOException as err:
            module.fail_json(changed=False, msg=str(err))

    for device in devices:
        device_info = {
            'geometry': device.hardwareGeometry,
            'name': device.path,
            'model': device.model,
            'size': device.length,
            'sectorSize': device.sectorSize
        }
        try:
            disk = parted.newDisk(device)
        except:
            disk = None

        if disk:
            device_info['partition_table'] = disk.type
            device_info['partitions'] = []
            device_info['flags'] = []
            for flag, value in flags.iteritems():
                if disk.getFlag(flag): device_info['flags'].append(value)
            for partition in disk.partitions:
                partition_facts = {
                    'number': partition.number,
                    'active': partition.active,
                    'name': partition.path,
                    'start': partition.geometry.start,
                    'end': partition.geometry.end,
                    'flags': [],
                    'filesystem': partition.fileSystem.type if partition.fileSystem else None,
                    'type': partition_types[partition.type] if partition.type in partition_types else "unknown"
                }
                for flag, value in flags.iteritems():
                    if partition.getFlag(flag): partition_facts['flags'].append(value)
                device_info['partitions'].append(partition_facts)
        disk_facts.append(device_info)

    module.exit_json(changed=False, devices=disk_facts)

if __name__ == '__main__':
    main()

#!/usr/bin/python

import os, sys, json, time
from ansible.module_utils.basic import AnsibleModule
import boto3
import botocore
from datetime import datetime

def json_serial(obj):
    if isinstance(obj, datetime):
        serial = obj.isoformat()
        return serial
    raise TypeError ("Type not serializable")

aws_regions=[
		'us-east-1',
		'us-west-2',
		'us-west-1',
		'eu-west-1',
		'eu-central-1',
		'ap-southeast-1',
		'ap-northeast-1',
		'ap-southeast-2',
		'ap-northeast-2',
		'sa-east-1']
default_access_key=os.environ.get("AWS_ACCESS_KEY_ID")
default_secret_key=os.environ.get("AWS_SECRET_ACCESS_KEY")
default_region=os.environ.get("EC2_REGION")

module = AnsibleModule(argument_spec = dict(
        region = dict(required=False, choices=aws_regions, default=default_region),
        size = dict(required=False, default=40, type='int', aliases=['volume_size']),
      	access_key = dict(required=False, no_log=True, default=default_access_key),
      	secret_key = dict(required=False, no_log=True, default=default_secret_key),
      	snapshot_id = dict(required=True, aliases=['snapshot']),
      	instance_id = dict(required=True, aliases=['instance']),
      	device = dict(required=True, aliases=['device_name']),
      	delete_on_termination = dict(required=False, default=True, type='bool'),
      	timeout = dict(required=False, default=300, type='int'),
    ))

region = module.params.get('region')
size = module.params.get('size')
access_key = module.params.get('access_key')
secret_key = module.params.get('secret_key')
snapshot_id = module.params.get('snapshot_id')
instance_id = module.params.get('instance_id')
device = module.params.get('device')
delete_on_termination = module.params.get('delete_on_termination')
timeout = module.params.get('timeout')
elapsed = 0

# module.exit_json(changed=True, msg=str(size))
session = boto3.session.Session(region_name=region, aws_access_key_id=access_key, aws_secret_access_key=secret_key)
client = session.client('ec2')

try:
    data = client.describe_instances(InstanceIds=[instance_id])
except botocore.exceptions.ClientError as err:
    module.fail_json(changed=False, msg=str(err))

instance = data['Reservations'][0]['Instances'][0]
instance_zone = instance['Placement']['AvailabilityZone']

try:
    volume = client.create_volume(Size=size, SnapshotId=snapshot_id, AvailabilityZone=instance_zone)
except botocore.exceptions.ClientError as err:
    module.fail_json(changed=False, msg=str(err))

if volume['ResponseMetadata']['HTTPStatusCode'] != 200:
    module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'create_volume' is %d " % volume['ResponseMetadata']['HTTPStatusCode'])

time.sleep(2) ; elapsed += 2
description = client.describe_volumes(VolumeIds=[volume['VolumeId']])
if len(description['Volumes']) == 0:
    client.delete_volume(VolumeId=volume['VolumeId'])
    module.fail_json(changed=False, msg="Error while volume creation: the volume cannot be reached")

while description['Volumes'][0]['State'] != 'available':
    time.sleep(2) ; elapsed += 2
    if elapsed > timeout:
        client.delete_volume(VolumeId=volume['VolumeId'])
        module.fail_json(changed=False, msg="Timeout exceeded")
    description = client.describe_volumes(VolumeIds=[volume['VolumeId']])

try:
    response = client.attach_volume(VolumeId=volume['VolumeId'], InstanceId=instance_id, Device=device)
except botocore.exceptions.ClientError as err:
    response = client.delete_volume(VolumeId=volume['VolumeId'])
    module.fail_json(changed=False, msg=str(err))

time.sleep(2) ; elapsed += 2
description = client.describe_volumes(VolumeIds=[volume['VolumeId']])
if len(description['Volumes']) == 0:
    client.delete_volume(VolumeId=volume['VolumeId'])
    module.fail_json(changed=False, msg="Error which volume creation: the volume cannot be reached")
if len(description['Volumes'][0]['Attachments']) == 0:
    client.delete_volume(VolumeId=volume['VolumeId'])
    module.fail_json(changed=False, msg="Error whille volume attachement: the volume cannot be attached")

while description['Volumes'][0]['Attachments'][0]['State'] != 'attached':
    time.sleep(2) ; elapsed += 2
    if elapsed > timeout:
        client.delete_volume(VolumeId=volume['VolumeId'])
        module.fail_json(changed=False, msg="Timeout exceeded")
    description = client.describe_volumes(VolumeIds=[volume['VolumeId']])

try:
    response = client.modify_instance_attribute(InstanceId=instance_id, BlockDeviceMappings=[{
            'DeviceName': device, 'Ebs': {'VolumeId': volume['VolumeId'], 'DeleteOnTermination': delete_on_termination}
            }])
except botocore.exceptions.ClientError as err:
    module.fail_json(changed=False, msg=str(err))

if response['ResponseMetadata']['HTTPStatusCode'] != 200:
    module.fail_json(changed=False, msg="The HTTPStatusCode of the command 'modify_instance_attribute' is %d " % response['ResponseMetadata']['HTTPStatusCode'])

module.exit_json(changed=True, msg=json.dumps(volume, default=json_serial))
